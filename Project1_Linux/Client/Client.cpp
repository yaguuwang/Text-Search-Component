///////////////////////////////////////////////////////////////// Client.cpp - The Client of the TextSearchTool             //// ver 1.0                                                   //// Haoyu Wang, CSE775 - Distributed Object, Spring 2018      //////////////////////////////////////////////////////////////////** Package Operations:* -------------------* - This package contains the TextSearchEngine class that talks* the FileMgr component and the TextSearch component* - This package contains the main entry of this project** Required Files:* ---------------* ../FileMgrCom/FileMgrCom_i.h* ../TextSearchComp/TextSearchCom_i.h** Maintenance History:* --------------------* ver 1.0 : 03 Apr 2018* - first release**/#include <iostream>#include <string>#include <vector>#include "../FileMgrCom/FileMgr.h"#include "../TextSearchCom/TextSearch.h"int main(int argc, char** argv) {    std::cout << "\n775 - DO Project 1 Demo\n";    std::cout << "=======================\n\n";    std::string path, reg;    std::vector<std::string> patterns;    if (argc < 3) {	std::cout << "Invalid arguments! Usage: client [path] [reg] [patterns] ...\n";	return 0;    }    else    {	path = argv[1];	reg = argv[2];	for (int i = 3; i<argc; i++)            patterns.push_back(argv[i]);    }    FileMgr* fm = FileMgr::getFM();    fm->setPath(path);    fm->setPatterns(patterns);    fm->scan();    TextSearch * ts = TextSearch::getTS();    while (true) {        auto file = fm->get();        if (!file.second) break;        std::cout << "Found " << reg << " in file: " << file.first << "\n";        auto lineNums = ts->search(file.first, reg);        for (auto lineNum : lineNums) {            if (lineNum == -1) continue;            std::cout << "\tAt line " << lineNum << "\n";        }        std::cout << "\n";    }    return 0;}